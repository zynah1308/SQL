# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 



#1. What is the avg popularity, danceability, and energy by artist and track?

SELECT artist_name, track_name, AVG(popularity), AVG(danceability), AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#2. Who are the Top 10 artists by popularity?

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10 ;

#3. How many songs on the list are by artist Doja Cat and which is the most most popular song of the artist?

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
WHERE artist_name = "Doja Cat"
ORDER BY popularity DESC;

#4. Which songs have a tempo great than 150 and duration greater than 200000 order by the longest song?

SELECT track_name, duration_ms, tempo
FROM BIT_DB.Spotifydata
WHERE tempo > "150" AND duration_ms > "200000"
GROUP BY track_name
ORDER BY duration_ms DESC;

#5. How many total artists are in the database?

SELECT COUNT(distinct artist_name)
FROM BIT_DB.Spotifydata
;

#6. How many tracks does each artist have in the database in order from least to most?

SELECT artist_name, COUNT(artist_name) AS Total_tracks
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Total_tracks ASC;













